/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MuseumsImport } from './routes/Museums'
import { Route as FooterImport } from './routes/Footer'
import { Route as ExhibitionsTestImport } from './routes/ExhibitionsTest'
import { Route as ExhibitionsImport } from './routes/Exhibitions'
import { Route as ContactImport } from './routes/Contact'
import { Route as CollectionsImport } from './routes/Collections'
import { Route as AboutImport } from './routes/About'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as ExhibitionIdImport } from './routes/Exhibition/$id'

// Create/Update Routes

const MuseumsRoute = MuseumsImport.update({
  id: '/Museums',
  path: '/Museums',
  getParentRoute: () => rootRoute,
} as any)

const FooterRoute = FooterImport.update({
  id: '/Footer',
  path: '/Footer',
  getParentRoute: () => rootRoute,
} as any)

const ExhibitionsTestRoute = ExhibitionsTestImport.update({
  id: '/ExhibitionsTest',
  path: '/ExhibitionsTest',
  getParentRoute: () => rootRoute,
} as any)

const ExhibitionsRoute = ExhibitionsImport.update({
  id: '/Exhibitions',
  path: '/Exhibitions',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/Contact',
  path: '/Contact',
  getParentRoute: () => rootRoute,
} as any)

const CollectionsRoute = CollectionsImport.update({
  id: '/Collections',
  path: '/Collections',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/About',
  path: '/About',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const ExhibitionIdRoute = ExhibitionIdImport.update({
  id: '/Exhibition/$id',
  path: '/Exhibition/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/About': {
      id: '/About'
      path: '/About'
      fullPath: '/About'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/Collections': {
      id: '/Collections'
      path: '/Collections'
      fullPath: '/Collections'
      preLoaderRoute: typeof CollectionsImport
      parentRoute: typeof rootRoute
    }
    '/Contact': {
      id: '/Contact'
      path: '/Contact'
      fullPath: '/Contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/Exhibitions': {
      id: '/Exhibitions'
      path: '/Exhibitions'
      fullPath: '/Exhibitions'
      preLoaderRoute: typeof ExhibitionsImport
      parentRoute: typeof rootRoute
    }
    '/ExhibitionsTest': {
      id: '/ExhibitionsTest'
      path: '/ExhibitionsTest'
      fullPath: '/ExhibitionsTest'
      preLoaderRoute: typeof ExhibitionsTestImport
      parentRoute: typeof rootRoute
    }
    '/Footer': {
      id: '/Footer'
      path: '/Footer'
      fullPath: '/Footer'
      preLoaderRoute: typeof FooterImport
      parentRoute: typeof rootRoute
    }
    '/Museums': {
      id: '/Museums'
      path: '/Museums'
      fullPath: '/Museums'
      preLoaderRoute: typeof MuseumsImport
      parentRoute: typeof rootRoute
    }
    '/Exhibition/$id': {
      id: '/Exhibition/$id'
      path: '/Exhibition/$id'
      fullPath: '/Exhibition/$id'
      preLoaderRoute: typeof ExhibitionIdImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/About': typeof AboutRoute
  '/Collections': typeof CollectionsRoute
  '/Contact': typeof ContactRoute
  '/Exhibitions': typeof ExhibitionsRoute
  '/ExhibitionsTest': typeof ExhibitionsTestRoute
  '/Footer': typeof FooterRoute
  '/Museums': typeof MuseumsRoute
  '/Exhibition/$id': typeof ExhibitionIdRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/About': typeof AboutRoute
  '/Collections': typeof CollectionsRoute
  '/Contact': typeof ContactRoute
  '/Exhibitions': typeof ExhibitionsRoute
  '/ExhibitionsTest': typeof ExhibitionsTestRoute
  '/Footer': typeof FooterRoute
  '/Museums': typeof MuseumsRoute
  '/Exhibition/$id': typeof ExhibitionIdRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/About': typeof AboutRoute
  '/Collections': typeof CollectionsRoute
  '/Contact': typeof ContactRoute
  '/Exhibitions': typeof ExhibitionsRoute
  '/ExhibitionsTest': typeof ExhibitionsTestRoute
  '/Footer': typeof FooterRoute
  '/Museums': typeof MuseumsRoute
  '/Exhibition/$id': typeof ExhibitionIdRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/About'
    | '/Collections'
    | '/Contact'
    | '/Exhibitions'
    | '/ExhibitionsTest'
    | '/Footer'
    | '/Museums'
    | '/Exhibition/$id'
    | '/demo/tanstack-query'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/About'
    | '/Collections'
    | '/Contact'
    | '/Exhibitions'
    | '/ExhibitionsTest'
    | '/Footer'
    | '/Museums'
    | '/Exhibition/$id'
    | '/demo/tanstack-query'
  id:
    | '__root__'
    | '/'
    | '/About'
    | '/Collections'
    | '/Contact'
    | '/Exhibitions'
    | '/ExhibitionsTest'
    | '/Footer'
    | '/Museums'
    | '/Exhibition/$id'
    | '/demo/tanstack-query'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CollectionsRoute: typeof CollectionsRoute
  ContactRoute: typeof ContactRoute
  ExhibitionsRoute: typeof ExhibitionsRoute
  ExhibitionsTestRoute: typeof ExhibitionsTestRoute
  FooterRoute: typeof FooterRoute
  MuseumsRoute: typeof MuseumsRoute
  ExhibitionIdRoute: typeof ExhibitionIdRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CollectionsRoute: CollectionsRoute,
  ContactRoute: ContactRoute,
  ExhibitionsRoute: ExhibitionsRoute,
  ExhibitionsTestRoute: ExhibitionsTestRoute,
  FooterRoute: FooterRoute,
  MuseumsRoute: MuseumsRoute,
  ExhibitionIdRoute: ExhibitionIdRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/About",
        "/Collections",
        "/Contact",
        "/Exhibitions",
        "/ExhibitionsTest",
        "/Footer",
        "/Museums",
        "/Exhibition/$id",
        "/demo/tanstack-query"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/About": {
      "filePath": "About.tsx"
    },
    "/Collections": {
      "filePath": "Collections.tsx"
    },
    "/Contact": {
      "filePath": "Contact.tsx"
    },
    "/Exhibitions": {
      "filePath": "Exhibitions.tsx"
    },
    "/ExhibitionsTest": {
      "filePath": "ExhibitionsTest.tsx"
    },
    "/Footer": {
      "filePath": "Footer.tsx"
    },
    "/Museums": {
      "filePath": "Museums.tsx"
    },
    "/Exhibition/$id": {
      "filePath": "Exhibition/$id.tsx"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
